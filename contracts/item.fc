#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/helpers.fc";
#include "imports/map.fc";

global int init?;

global int storage::index;
global slice storage::authority_address;
global slice storage::owner_address;
global int storage::revoked_at;
global cell storage::version_data;
global cell storage::content;

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::index = ds~load_uint(256);
    storage::authority_address = ds~load_msg_addr();

    if (ds.slice_bits() > 0) {
        init? = -1;
        storage::owner_address = ds~load_msg_addr();
        storage::revoked_at = ds~load_uint(64);
        storage::version_data = ds~load_ref();
        storage::content = ds~load_ref();
    } else {
        init? = 0;
        storage::owner_address = null_addr();
        storage::revoked_at = 0;
        storage::version_data = null();
        storage::content = null();
    }
}

() save_data() impure {
    builder b = begin_cell();
    b = b.store_uint(storage::index, 256);
    b = b.store_slice(storage::authority_address);
    if (init?) {
        validate_map_content(storage::version_data, storage::content);

        b = b.store_slice(storage::owner_address);
        b = b.store_uint(storage::revoked_at, 64);
        b = b.store_ref(storage::version_data);
        b = b.store_ref(storage::content);
    }
    set_data(b.end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    if (flags & 1) {
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof()) {
            int query_id = in_msg_body~load_uint(64);
            send_message(flag::regular(), storage::owner_address, 0, op::ownership_proof_bounced(), query_id, null(), 64);
        }
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::transfer()) {
        throw_unless(401, equal_slices(storage::authority_address, sender_address));

        in_msg_body~load_msg_addr();
        slice initiator_address = in_msg_body~load_msg_addr();
        in_msg_body~load_int(1);
        in_msg_body~load_coins();
        in_msg_body~load_uint(32);

        if (~ init?) {
            slice item_data = in_msg_body~load_ref().begin_parse();
            storage::owner_address = item_data~load_msg_addr();
            storage::version_data = item_data~load_ref();
            storage::content = item_data~load_ref();
            init? = -1;
            send_message(flag::regular(), storage::owner_address, 100, op::ownership_assigned(), query_id, begin_cell().store_slice(storage::authority_address), 1);
            raw_reserve(min_tons_for_storage(), 0);
            send_message(flag::regular(), storage::authority_address, 0, op::excesses(), query_id, null(), 128);

            save_data();
        } else {
            raw_reserve(min_tons_for_storage(), 0);
            send_message(flag::regular(), initiator_address, 0, op::excesses(), query_id, null(), 128);
        }

        return ();
    }
    if (op == op::request_owner()) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        builder message = begin_cell()
                .store_uint(storage::index, 256)
                .store_slice(sender_address)
                .store_slice(storage::owner_address)
                .store_ref(body)
                .store_uint(storage::revoked_at, 64)
                .store_uint(with_content, 1);

        if (with_content != 0) {
            message = message.store_ref(storage::content);
        }

        send_message(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, message, 64);
        return ();
    }
    if (op == op::prove_ownership()) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        builder message = begin_cell()
                .store_uint(storage::index, 256)
                .store_slice(storage::owner_address)
                .store_ref(body)
                .store_uint(storage::revoked_at, 64)
                .store_uint(with_content, 1);

        if (with_content != 0) {
            message = message.store_ref(storage::content);
        }

        send_message(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, message, 64);
        return ();
    }
    if (op == op::get_static_data()) {
        slice version_data_slice = storage::version_data.begin_parse();
        slice version_address = version_data_slice~load_msg_addr();
        builder message = begin_cell().store_uint(storage::index, 256).store_slice(version_address);

        send_message(flag::regular(), sender_address, 0, op::report_static_data(), query_id, message, 64);
        return ();
    }
    if (op == op::destroy()) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        send_message(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);

        storage::owner_address = null_addr();
        storage::authority_address = null_addr();
        save_data();
        return ();
    }
    if (op == op::revoke()) {
        throw_unless(401, equal_slices(storage::authority_address, sender_address));
        throw_unless(403, storage::revoked_at == 0);

        storage::revoked_at = now();
        save_data();
        return ();
    }
    if (op == op::take_excess()) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));

        raw_reserve(min_tons_for_storage(), 0);
        send_message(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);
        return ();
    }
    if (op == op::edit_content()) {
        if (in_msg_body.slice_refs() == 2) {
            throw_unless(401, equal_slices(storage::authority_address, sender_address));

            storage::content = in_msg_body~load_ref();
            storage::version_data = in_msg_body~load_ref();
        } else {
            throw_unless(401, equal_slices(storage::owner_address, sender_address));

            storage::content = in_msg_body~load_ref();
        }
        raw_reserve(min_tons_for_storage(), 0);
        send_message(flag::regular(), storage::owner_address, 0, op::excesses(), query_id, null(), 128);

        save_data();
        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    slice version_data_slice = storage::version_data.begin_parse();
    slice version_address = version_data_slice~load_msg_addr();
    return (init?, storage::index, version_address, storage::owner_address, storage::content);
}

slice get_authority_address() method_id {
    load_data();
    return storage::authority_address;
}

int get_revoked_time() method_id {
    load_data();
    return storage::revoked_at;
}