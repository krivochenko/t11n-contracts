#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/helpers.fc";

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;

(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(256), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
        return (0, index, collection_address, null(), null()); ;; nft not initialized yet
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content) impure {
    set_data(
            begin_cell()
                    .store_uint(index, 256)
                    .store_slice(collection_address)
                    .store_slice(owner_address)
                    .store_ref(content)
                    .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int init?, int index, slice collection_address, slice owner_address, cell content) = load_data();

    if (~ init? & op == op::transfer()) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        slice new_owner_address = in_msg_body~load_msg_addr();
        cell new_content = in_msg_body~load_ref();

        send_msg(new_owner_address, 100, op::ownership_assigned(), query_id, begin_cell().store_slice(collection_address), 1);

        store_data(index, collection_address, new_owner_address, new_content);
        return ();
    }
    if (op == op::edit_content()) {
        throw_unless(405, equal_slices(owner_address, sender_address));

        store_data(index, collection_address, owner_address, in_msg_body~load_ref());
        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content) = load_data();
    return (init?, index, collection_address, owner_address, content);
}