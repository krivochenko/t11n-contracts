#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/helpers.fc";
#include "imports/text.fc";

;; NFT collection smart contract

;; storage scheme
;; storage#_ owner_address:MsgAddress
;;           content:^Cell
;;           circles:^Cell
;;           nft_item_code:^Cell
;;           = Storage;

(slice, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
            ds~load_msg_addr(), ;; owner_address
            ds~load_ref(), ;; content
            ds~load_ref(), ;; circles
            ds~load_ref() ;; nft_item_code
    );
}

() save_data(slice owner_address, cell content, cell circles, cell nft_item_code) impure inline {
    set_data(begin_cell()
            .store_slice(owner_address)
            .store_ref(content)
            .store_ref(circles)
            .store_ref(nft_item_code)
            .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 256).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(100000000)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, content, circles, nft_item_code) = load_data();

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 1) { ;; deploy new nft
        slice item_owner_address = in_msg_body~load_msg_addr();
        cell item_content = in_msg_body~load_ref();
        int item_index = slice_hash(item_owner_address);

        cell payload = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_slice(item_owner_address)
                .store_uint(0, 2)
                .store_int(0, 1)
                .store_coins(100)
                .store_uint(0, 32)
                .store_ref(item_content)
                .end_cell();

        deploy_nft_item(item_index, nft_item_code, payload);

        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, content, _, _) = load_data();
    return (0, content, owner_address);
}

int get_nft_index_by_owner_address(slice owner_address) method_id {
    return slice_hash(owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, circles_dict, _) = load_data();
    slice individual_nft_content_slice = individual_nft_content.begin_parse();

    tuple parts = empty_tuple();
    parts~push_back("<svg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'>");

    (int key, slice val, int flag) = circles_dict.udict_get_min?(256);
    while (flag) {
        cell value_cell = val~load_ref();
        slice value = value_cell.begin_parse();
        var (x, y, r) = (value~load_uint(32), value~load_uint(32), value~load_uint(32));
        slice color = individual_nft_content_slice~load_bits(48);

        parts~push_back("<circle fill='#");
        parts~push_back(color);
        parts~push_back("' cx='");
        parts~push_back(int_to_slice(x));
        parts~push_back("' cy='");
        parts~push_back(int_to_slice(y));
        parts~push_back("' r='");
        parts~push_back(int_to_slice(r));
        parts~push_back("' />");

        (key, val, flag) = circles_dict.udict_get_next?(256, key);
    }

    parts~push_back("</svg>");

    cell svg = concat_to_chunk(parts);

    cell content = new_dict();
    content~udict_set_ref(256, "name"H, begin_cell().store_uint(0, 8).store_slice("Name").end_cell());
    content~udict_set_ref(256, "description"H, begin_cell().store_uint(0, 8).store_slice("Description").end_cell());
    content~udict_set_ref(256, "image_data"H, svg);

    return begin_cell().store_uint(0, 8).store_dict(content).end_cell();
}