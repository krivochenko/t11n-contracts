#include "stdlib.fc";

int min_tons_for_storage() asm "50000000 PUSHINT";
int workchain() asm "0 PUSHINT";
slice null_addr() asm "b{00} PUSHSLICE";

() force_chain(slice addr) impure {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == workchain());
}

cell calculate_state_init(cell code, cell data) {
    return begin_cell()
            .store_uint(0, 2)
            .store_dict(code)
            .store_dict(data)
            .store_uint(0, 1)
            .end_cell();
}

slice calculate_address(cell state_init) {
    return begin_cell()
            .store_uint(4, 3)
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() send_message(slice to_address, int amount, int op, int query_id, builder msg_body, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(msg_body)) {
        msg = msg.store_builder(msg_body);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

slice send_deploy_message(cell state_init, int amount, cell msg_body, int mode) impure inline {
    slice address = calculate_address(state_init);
    cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(msg_body)
            .end_cell();

    send_raw_message(msg, mode);
    return address;
}

slice int_to_slice(int n) {
    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = n~divmod(10);
        chars = cons(r + 48, chars);
    } until (n == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));

    return string.end_cell().begin_parse();
}

int get_dict_size(cell dict, int key_size) {
    int size = 0;

    (int key, slice value, int flag) = dict.udict_get_min?(key_size);

    while (flag) {
        size = size + 1;
        (key, value, flag) = dict.udict_get_next?(key_size, key);
    }

    return size;
}