#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/helpers.fc";
#include "imports/state-init.fc";

global slice storage::owner_address;
global cell storage::collection_code;
global cell storage::item_code;
global cell storage::candidate_collection;
global cell storage::latest_collection;

() load_data() impure {
    slice ds = get_data().begin_parse();

    storage::owner_address = ds~load_msg_addr();
    storage::collection_code = ds~load_ref();
    storage::item_code = ds~load_ref();

    if (ds.slice_refs() > 0) {
        storage::candidate_collection = ds~load_ref();
    } else {
        storage::candidate_collection = begin_cell().end_cell();
    }
    if (ds.slice_refs() > 0) {
        storage::latest_collection = ds~load_ref();
    } else {
        storage::latest_collection = null();
    }
}

() save_data() impure {
    builder b = begin_cell()
            .store_slice(storage::owner_address)
            .store_ref(storage::collection_code)
            .store_ref(storage::item_code);
    if (~ null?(storage::candidate_collection)) {
        b = b.store_ref(storage::candidate_collection);
    }
    if (~ null?(storage::latest_collection)) {
        b = b.store_ref(storage::latest_collection);
    }
    set_data(b.end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::authority::deploy_collection) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));
        cell collection_content = in_msg_body~load_ref();
        cell map = in_msg_body~load_ref();

        cell collection_state_init = get_collection_state_init(storage::collection_code, my_address(), collection_content, map, storage::item_code);
        cell msg_body = begin_cell().store_uint(op::collection::deploy, 32).store_uint(query_id, 64).end_cell();
        slice collection_address = send_deploy_message(collection_state_init, 500000000, msg_body, 1);

        storage::candidate_collection = begin_cell().store_slice(collection_address).store_uint(get_dict_size(map, 10), 10).end_cell();

        save_data();
        return ();
    }
    if (op == op::authority::release_collection) {
        slice candidate_collection_slice = storage::candidate_collection.begin_parse();
        slice candidate_collection_address = candidate_collection_slice~load_msg_addr();
        throw_unless(401, equal_slices(sender_address, candidate_collection_address));

        storage::latest_collection = storage::candidate_collection;

        save_data();
        return ();
    }
    if (op == op::authority::deploy_item) {
        slice item_owner_address = in_msg_body~load_msg_addr();
        cell item_content = in_msg_body~load_ref();

        int item_index = slice_hash(item_owner_address);
        cell item_state_init = get_item_state_init(storage::item_code, item_index, my_address());
        slice item_address = calculate_address(item_state_init);

        cell item_data = begin_cell()
                .store_slice(item_owner_address)
                .store_ref(storage::latest_collection)
                .store_ref(item_content)
                .end_cell();

        cell msg_body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_slice(item_owner_address)
                .store_uint(0, 2)
                .store_int(0, 1)
                .store_coins(0)
                .store_uint(0, 32)
                .store_ref(item_data)
                .end_cell();

        send_deploy_message(item_state_init, 100000000, msg_body, 1);

        return ();
    }
    if (op == op::authority::upgrade_item) {
        int item_index = slice_hash(sender_address);
        cell item_state_init = get_item_state_init(storage::item_code, item_index, my_address());
        slice item_address = calculate_address(item_state_init);

        builder msg_body = begin_cell()
                .store_ref(in_msg_body~load_ref())
                .store_ref(storage::latest_collection);

        send_message(item_address, 50000000, op::edit_content(), query_id, msg_body, 128);

        return ();
    }
    throw(0xffff);
}

int get_nft_index_by_owner_address(slice owner_address) method_id {
    return slice_hash(owner_address);
}

cell get_latest_collection() method_id {
    load_data();

    return storage::latest_collection;
}
