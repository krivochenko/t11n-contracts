#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/helpers.fc";
#include "imports/state-init.fc";

global slice storage::owner_address;
global cell storage::map;

() load_data() impure {
    slice ds = get_data().begin_parse();
    storage::owner_address = ds~load_msg_addr();
    storage::map = ds~load_dict();
}

() save_data() impure {
    builder b = begin_cell()
            .store_slice(storage::owner_address)
            .store_dict(storage::map);
    set_data(b.end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    int coins = cs~load_coins();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    throw_unless(401, equal_slices(sender_address, storage::owner_address));

    if (op == op::fill_map()) {
        cell countries = in_msg_body~load_ref();
        (int max_key, _, int not_empty) = storage::map.udict_get_max?(10);

        max_key = not_empty ? max_key : -1;

        (int country_key, slice country, int country_flag) = countries.udict_get_min?(10);
        while (country_flag) {
            max_key = max_key + 1;
            storage::map~udict_set(10, max_key, country);
            (country_key, country, country_flag) = countries.udict_get_next?(10, country_key);
        }

        save_data();

        raw_reserve(min_tons_for_storage(), 0);
        send_message(flag::regular(), storage::owner_address, 0, op::excesses(), query_id, null(), 128);

        return ();
    }
    if (op == op::deploy_version()) {
        slice authority_address = in_msg_body~load_msg_addr();
        cell collection_content = in_msg_body~load_ref();

        builder msg_body = begin_cell().store_ref(collection_content).store_ref(storage::map);

        raw_reserve(min_tons_for_storage(), 0);
        send_message(flag::regular(), authority_address, 0, op::deploy_version(), query_id, msg_body, 128);

        return ();
    }
    if (op == op::reset_map()) {
        storage::map = new_dict();

        save_data();

        raw_reserve(min_tons_for_storage(), 0);
        send_message(flag::regular(), storage::owner_address, 0, op::excesses(), query_id, null(), 128);

        return ();
    }
    throw(0xffff);
}

(cell, int) get_map() method_id {
    load_data();
    int countries_count = null?(storage::map) ? 0 : get_dict_size(storage::map, 10);
    return (storage::map, countries_count);
}